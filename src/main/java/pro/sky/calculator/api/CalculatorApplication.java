package pro.sky.calculator.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

//Этап 1: создание калькулятора
//		Шаг 1
//		Создать Spring Boot проект calculator.
//		Шаг 2
//		Подключить модуль Spring Web при создании.
//		Шаг 3
//		Написать 5 методов, которые при вызове из браузера делают следующее:
//
//		Метод по адресу /calculator должен вернуть приветствие "Добро пожаловать в калькулятор".
//		Метод по адресу /calculator/plus?num1=5&num2=5 должен сложить num1 и num2 и вернуть результат в формате "5 + 5 = 10".
//		Метод по адресу /calculator/minus?num1=5&num2=5 должен вычесть из num1 num2 и вернуть результат в формате "5 − 5 = 0".
//		Метод по адресу /calculator/multiply?num1=5&num2=5 должен умножить num1 на num2 и вернуть результат в формате "5 * 5 = 25".
//		Метод по адресу /calculator/divide?num1=5&num2=5 должен разделить num1 на num2 и вернуть результат в формате "5 / 5 = 1".
//		При выполнении задания важно учесть
//
//		Этап 2: покрытие кода тестами
//		Перед добавлением зависимостей проверьте, что в вашем проекте (pom.xml) отсутствует зависимость
//		spring-boot-starter-test
//
//		Если эта зависимость присутствует в вашем проекте (добавляется автоматически при генерации Spring-проекта),
//		то отдельно подключать JUnit не требуется.
//
//		Шаг 1. Доработать метод деления.
//
//		Теперь, в случае передачи в качестве второго параметра числа 0, нужно выбрасывать исключение своего наследника
//		IllegalArgumentException из метода калькулятора с соответствующим текстом ошибки. Использовать для проверки
//		параметра контроллер больше нельзя.
//
//		Шаг 2. Создать тестовый класс и написать в нем тесты для всех методов калькулятора. По 2 набора параметров на каждый.
//
//		На метод деления написать дополнительный тест с проверкой выбрасывания исключения.
//
//		Шаг 3. Создать тестовый класс и написать в нем параметризованные тесты для методов калькулятора.
//
//		Учтите, что может потребоваться написать 4 параметризованных теста и один или несколько методов с набором аргументов.
//		Тест на исключение дублировать не надо.

@SpringBootApplication
public class CalculatorApplication {

	public static void main(String[] args) {

		SpringApplication.run(CalculatorApplication.class, args);
	}

}
